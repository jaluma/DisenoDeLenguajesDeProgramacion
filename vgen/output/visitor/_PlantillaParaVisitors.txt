/**
 * @generated VGen (for ANTLR) 1.4.0
 */


// package <nombre paquete>;

import ast.*;

/*
Plantilla para Visitors.
Para crear un nuevo Visitor cortar y pegar este código y ya se tendría un visitor que compila y
que al ejecutarlo recorrería todo el árbol (sin hacer nada aún en él).
Solo quedaría añadir a cada método visit aquello adicional que se quiera realizar sobre su nodo del AST.
*/

public class <nombre clase> extends DefaultVisitor {

	// ---------------------------------------------------------
	// Tareas a realizar en cada método visit:
	//
	// Si en algún método visit NO SE QUIERE HACER NADA más que recorrer los hijos entonces se puede
	// borrar (dicho método se heredaría de DefaultVisitor con el código de recorrido).
	//
	// Lo siguiente es para cuando se quiera AÑADIR alguna funcionalidad adicional a un visit:
	//
	// - El código que aparece en cada método visit es aquel que recorre los hijos. Es el mismo código
	//		que está implementado en el padre (DefaultVisitor). Por tanto la llamada a 'super.visit' y el
	//		resto del código del método hacen lo mismo (por ello 'super.visit' está comentado).
	//
	// - Lo HABITUAL será borrar todo el código de recorrido dejando solo la llamada a 'super.visit'. De esta
	//		manera, cada método visit se puede centrar en la tarea que tiene que realizar sobre su nodo del AST
    //      (dejando que el padre se encargue del recorrido de los hijos).
	//
	// - La razón de que aparezca el código de recorrido de los hijos es por si se necesita realizar alguna
	//		tarea DURANTE el mismo (por ejemplo ir comprobando su tipo). En este caso, ya se tiene implementado
	//		dicho recorrido y solo habría que incrustar las acciones adicionales en el mismo. En este caso,
	//		es la llamada a 'super.visit' la que debería ser borrada.
	// ---------------------------------------------------------

	//	class Program { List<Instruccion> instruccions; }
	public Object visit(Program node, Object param) {

		// super.visit(node, param);

		if (node.getInstruccions() != null)
			for (Instruccion child : node.getInstruccions())
				child.accept(this, param);

		return null;
	}

	//	class Instruccion { Definition definitions; }
	public Object visit(Instruccion node, Object param) {

		// super.visit(node, param);

		if (node.getDefinitions() != null)
			node.getDefinitions().accept(this, param);

		return null;
	}

	//	class VarDefinition { Type type;  String name;  List<Expression> size; }
	public Object visit(VarDefinition node, Object param) {

		// super.visit(node, param);

		if (node.getType() != null)
			node.getType().accept(this, param);

		if (node.getSize() != null)
			for (Expression child : node.getSize())
				child.accept(this, param);

		return null;
	}

	//	class StructDefinition { String name;  List<Definition> definitions; }
	public Object visit(StructDefinition node, Object param) {

		// super.visit(node, param);

		if (node.getDefinitions() != null)
			for (Definition child : node.getDefinitions())
				child.accept(this, param);

		return null;
	}

	//	class FunDefinition { String name;  List<Param> params;  Type return_t;  List<Definition> definitions;  List<Sentence> sentences; }
	public Object visit(FunDefinition node, Object param) {

		// super.visit(node, param);

		if (node.getParams() != null)
			for (Param child : node.getParams())
				child.accept(this, param);

		if (node.getReturn_t() != null)
			node.getReturn_t().accept(this, param);

		if (node.getDefinitions() != null)
			for (Definition child : node.getDefinitions())
				child.accept(this, param);

		if (node.getSentences() != null)
			for (Sentence child : node.getSentences())
				child.accept(this, param);

		return null;
	}

	//	class ParamDefinition { String name;  Type type; }
	public Object visit(ParamDefinition node, Object param) {

		// super.visit(node, param);

		if (node.getType() != null)
			node.getType().accept(this, param);

		return null;
	}

	//	class IntType {  }
	public Object visit(IntType node, Object param) {
		return null;
	}

	//	class RealType {  }
	public Object visit(RealType node, Object param) {
		return null;
	}

	//	class CharType {  }
	public Object visit(CharType node, Object param) {
		return null;
	}

	//	class VarType {  }
	public Object visit(VarType node, Object param) {
		return null;
	}

	//	class Print { Expression expression;  String lex; }
	public Object visit(Print node, Object param) {

		// super.visit(node, param);

		if (node.getExpression() != null)
			node.getExpression().accept(this, param);

		return null;
	}

	//	class Assignment { Expression left;  Expression right; }
	public Object visit(Assignment node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class Return { Expression expression; }
	public Object visit(Return node, Object param) {

		// super.visit(node, param);

		if (node.getExpression() != null)
			node.getExpression().accept(this, param);

		return null;
	}

	//	class IfElseStatement { Expression expression;  List<Sentence> if_s;  List<Sentence> else_s; }
	public Object visit(IfElseStatement node, Object param) {

		// super.visit(node, param);

		if (node.getExpression() != null)
			node.getExpression().accept(this, param);

		if (node.getIf_s() != null)
			for (Sentence child : node.getIf_s())
				child.accept(this, param);

		if (node.getElse_s() != null)
			for (Sentence child : node.getElse_s())
				child.accept(this, param);

		return null;
	}

	//	class WhileStatement { Expression expression;  List<Sentence> sentence; }
	public Object visit(WhileStatement node, Object param) {

		// super.visit(node, param);

		if (node.getExpression() != null)
			node.getExpression().accept(this, param);

		if (node.getSentence() != null)
			for (Sentence child : node.getSentence())
				child.accept(this, param);

		return null;
	}

	//	class Expresion { Expression expression; }
	public Object visit(Expresion node, Object param) {

		// super.visit(node, param);

		if (node.getExpression() != null)
			node.getExpression().accept(this, param);

		return null;
	}

	//	class IntConstant { String value; }
	public Object visit(IntConstant node, Object param) {
		return null;
	}

	//	class RealConstant { String value; }
	public Object visit(RealConstant node, Object param) {
		return null;
	}

	//	class Variable { String name; }
	public Object visit(Variable node, Object param) {
		return null;
	}

	//	class ArithmeticExpression { Expression left;  String operator;  Expression right; }
	public Object visit(ArithmeticExpression node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class FunCall { String name;  List<Expression> params; }
	public Object visit(FunCall node, Object param) {

		// super.visit(node, param);

		if (node.getParams() != null)
			for (Expression child : node.getParams())
				child.accept(this, param);

		return null;
	}

	//	class CastExpression { Type type;  Expression expression; }
	public Object visit(CastExpression node, Object param) {

		// super.visit(node, param);

		if (node.getType() != null)
			node.getType().accept(this, param);

		if (node.getExpression() != null)
			node.getExpression().accept(this, param);

		return null;
	}

	//	class FunCallMethod { Expression expression;  String name; }
	public Object visit(FunCallMethod node, Object param) {

		// super.visit(node, param);

		if (node.getExpression() != null)
			node.getExpression().accept(this, param);

		return null;
	}

	//	class ArrayCall { Expression call;  Expression index; }
	public Object visit(ArrayCall node, Object param) {

		// super.visit(node, param);

		if (node.getCall() != null)
			node.getCall().accept(this, param);

		if (node.getIndex() != null)
			node.getIndex().accept(this, param);

		return null;
	}
}
