CATEGORIES
expression, sentence, type, definition

NODES
program -> instructions:instruction*;

instruction -> definitions:definition;

varDefinition:definition -> name:string type;
structDefinition:definition -> name:varType definitions:structField*;
funDefinition:definition -> name:string params:definition* return_t:type definitions:varDefinition* sentences:sentence*;
structField:definition -> name:string type:type;

intType:type -> ;
realType:type -> ;
charType:type -> ;
varType:type -> type:string;
voidType:type ->;
arrayType:type -> size:intConstant type;
structType:type -> fields:structField*;
errorType:type ->;

print:sentence -> expression lex:string;
assignment:sentence -> left:expression right:expression;
return:sentence -> expression;
read:sentence -> expression;
ifElse:sentence -> expression if_s:sentence* else_s:sentence*;
while:sentence -> expression sentence*;
funInvocation:sentence -> name:string params:expression*;

funInvocationExpression:expression -> name:string params:expression*;
intConstant:expression -> value:string;
realConstant:expression -> value:string;
charConstant:expression -> value:string;
voidConstant:expression ->;
variable:expression -> name:string;
arithmeticExpression:expression -> left:expression operator:string right:expression;
comparableExpression:expression -> left:expression operator:string right:expression;
logicalExpression:expression -> left:expression operator:string right:expression;
unaryExpression:expression -> expr:expression operator:string;
castExpression:expression -> type:type expression:expression;
fieldAccessExpression:expression -> expression:expression name:string;
indexExpression:expression -> call:expression index:expression;